{{- range $nodePool := .Values.nodePools }}
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "fullname" $ }}-{{ $nodePool.name }}"
{{- if $nodePool.ownerReferences }}
  ownerReferences:
{{ toYaml $nodePool.ownerReferences | indent 4 }}
{{- end }}
  labels:
    app: {{ template "fullname" $ }}
    chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    release: "{{ $.Release.Name }}"
    heritage: "{{ $.Release.Service }}"
    nodePool: {{ $nodePool.name | quote }}
{{- range $role := $nodePool.roles }}
    {{ $role }}: "true"
{{- end }}
spec:
  replicas: {{ $nodePool.replicas }}
  podManagementPolicy: {{ default "OrderedReady" $nodePool.podManagementPolicy | quote }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" $ }}
        chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
        release: "{{ $.Release.Name }}"
        heritage: "{{ $.Release.Service }}"
        nodePool: {{ $nodePool.name | quote }}
{{- range $role := $nodePool.roles }}
        {{ $role }}: "true"
{{- end }}
    spec:
      nodeSelector:
{{ toYaml $nodePool.nodeSelector | indent 8 }}
      terminationGracePeriodSeconds: 60
      serviceAccountName: {{ if $.Values.rbac.create }}{{ template "fullname" $ }}{{ else }}"{{ $.Values.rbac.serviceAccountName }}"{{ end }}
      securityContext:
        fsGroup: {{ $.Values.image.fsGroup }}
      initContainers:
{{- range $index, $sysctl := $.Values.sysctl }}
      - name: tune-sysctl-{{ $index }}
        image: alpine:3.5
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 10m
            memory: 8Mi
          limits:
            cpu: 10m
            memory: 8Mi
        securityContext:
          privileged: true
        command:
        - sysctl
        - -w
        - {{ $sysctl | quote }}
{{- end }}
      containers:
      - name: elasticsearch
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        imagePullPolicy: {{ $.Values.image.pullPolicy | quote }}
        args:
        - start
        - --roles={{ toJson $nodePool.roles }}
        - --clusterURL=http://{{ template "fullname" $ }}:9200
        - --controllerName="{{ template "fullname" $ }}-{{ $nodePool.name }}"
        - --controllerKind=StatefulSet
        - --namespace=$(NAMESPACE)
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
{{- range $k, $v := $nodePool.env }}
        - name: {{ $k }}
          value: {{ $v }}
{{- end }}
        - name: DISCOVERY_SERVICE
          value: {{ template "fullname" $ }}-masters
        # the minimum number of masters required to form a quorom
        - name: NUMBER_OF_MASTERS
          value: '{{ required "Minimum number of masters must be set" $.Values.minimumMasters }}'
        readinessProbe:
          httpGet:
            port: 12001
            path: /
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            port: 12000
            path: /
          initialDelaySeconds: 30
          periodSeconds: 2
          timeoutSeconds: 5
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
        resources:
{{ toYaml $nodePool.resources | indent 10 }}
        ports:
        - name: transport
          containerPort: 9300
        - name: http
          containerPort: 9200
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
      volumes:
{{- if not $nodePool.persistence.enabled }}
      - name: elasticsearch-data
        emptyDir: {}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
      annotations:
      {{- if $nodePool.persistence.storageClass }}
        volume.beta.kubernetes.io/storage-class: {{ $nodePool.persistence.storageClass | quote }}
      {{- end }}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ $nodePool.persistence.size | quote }}
{{- end }}
  serviceName: "{{ template "fullname" $ }}-{{ $nodePool.name }}"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ template "fullname" $ }}-{{ $nodePool.name }}"
{{- if $nodePool.ownerReferences }}
  ownerReferences:
{{ toYaml $nodePool.ownerReferences | indent 4 }}
{{- end }}
  labels:
    app: {{ template "fullname" $ }}
    chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    release: "{{ $.Release.Name }}"
    heritage: "{{ $.Release.Service }}"
    nodePool: {{ $nodePool.name | quote }}
{{- range $role := $nodePool.roles }}
    {{ $role }}: "true"
{{- end }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: api
    port: 9200
    targetPort: 9200
  - name: transport
    port: 9300
    targetPort: 9300
  selector:
    app: {{ template "fullname" $ }}
    chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    release: "{{ $.Release.Name }}"
    heritage: "{{ $.Release.Service }}"
    nodePool: {{ $nodePool.name | quote }}
---
{{- end }}
